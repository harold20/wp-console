{% extends "base/class.php.twig" %}

{% block file_path %}
\WP\{{pluginNameSpace}}\Command\{{ class }}.
{% endblock %}

{% block namespace_class %}
namespace WP\{{pluginNameSpace}}\Command;
{% endblock %}

{% block use_class %}
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use WP\Console\Core\Command\Command;
use WP\Console\Command\Shared\CommandTrait;
use WP\Console\Annotations\WPCommand;
{% endblock %}

{% block class_declaration %}
/**
 * Class {{ class_name }}.
 *
 * @package WP\{{pluginNameSpace}}
 *
 * @WPCommand (
 *     extension="{{plugin}}",
 *     extensionType="plugin"
 * )
 */
class {{ class_name }} extends Command {% endblock %}
{% block class_construct %}
{% if services is not empty %}

  /**
   * {@inheritdoc}
   */
  public function __construct({{ servicesAsParameters(services)|join(', ') }}) {
{{ serviceClassInitialization(services) }}
    parent::__construct();
  }
{% endif %}
{% endblock %}

{% block class_methods %}
  /**
   * {@inheritdoc}
   */
  protected function configure() {
    $this
      ->setName('{{ name }}')
      ->setDescription($this->trans('commands.{{ command_key }}.description'));
  }

  /**
   * {@inheritdoc}
   */
  protected function execute(InputInterface $input, OutputInterface $output) {
    $this->getIo()->info($this->trans('commands.{{ command_key }}.messages.success'));
  }
{%- endblock -%}
